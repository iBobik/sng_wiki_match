<?php
// $Id: apachesolr.install,v 1.20 2010/12/18 02:47:21 pwolanin Exp $

/**
 * @file
 *   Install and related hooks for apachesolr_search.
 */

/**
 * Implements hook_requirements().
 */
function apachesolr_requirements($phase) {
  $requirements = array();
  $file_exists = file_exists(dirname(__FILE__) . '/SolrPhpClient/Apache/Solr/Service.php');
  // Ensure translations don't break at install time
  $t = get_t();
  $has_server_settings = FALSE;
  if ($phase == 'runtime' && $file_exists) {
    $server_id = variable_get('apachesolr_default_server', 'solr');
      $server = apachesolr_server_load($server_id);
      if (!$server || empty($server['host']) || empty($server['port']) || empty($server['path'])) {
      $requirements['apachesolr'] = array(
        'title' => $t('Apache Solr'),
        'value' => $t('Missing server configuration'),
        'description' => $t('Missing or invalid Solr server record for the default server ID %id.', array('%id' => $server_id)),
        'severity' => REQUIREMENT_ERROR,
      );
    }
    else {
      $has_server_settings = TRUE;
    }
  }
  if ($phase == 'runtime' && $has_server_settings) {
    $ping = FALSE;
    try {
      $solr = apachesolr_get_solr($server_id);
      $ping = @$solr->ping(variable_get('apachesolr_ping_timeout', 4));
      // If there is no $solr object, there is no server available, so don't continue.
      if (!$ping) {
        throw new Exception(t('No Solr instance available when checking requirements.'));
      }
    }
    catch (Exception $e) {
      watchdog('Apache Solr', nl2br(check_plain($e->getMessage())), NULL, WATCHDOG_ERROR);
    }
    $value = $ping ? $t('Your site has contacted the Apache Solr server.') : $t('Your site was unable to contact the Apache Solr server.');
    $severity = $ping ? REQUIREMENT_OK : REQUIREMENT_ERROR;
    $variables['items'] = array(
      $t('Host: %host', array('%host' => $server['host'])),
      $t('Port: %port', array('%port' => $server['port'])),
      $t('Path: %path', array('%path' => $server['path'])),
    );
    $settings = theme('item_list', $variables);
    $requirements['apachesolr'] = array(
      'title' => $t('Apache Solr'),
      'value' => $value,
      'description' => $t('Default server settings: !settings', array('!settings' => $settings)),
      'severity' => $severity,
    );
  }
  // All phases
  $title = $t('Apache Solr PHP Client Library');
  if ($file_exists) {
    $expected_revision = 'Revision: 22';
    require_once 'SolrPhpClient/Apache/Solr/Service.php';
    $revision = defined('Apache_Solr_Service::SVN_REVISION') ? trim(Apache_Solr_Service::SVN_REVISION, ' $') : '';
    if ($revision == $expected_revision) {
      $severity = REQUIREMENT_OK;
      $value = $t('Correct version "@expected".', array('@expected' => $expected_revision));
      $description = NULL;
    }
    else {
      $value = $t('Incorrect version "@version". See the instructions in README.txt.', array('@version' => $revision));
      $description = $t('The version of the library in the SolrPhpClient directory is "@version" compared to the expected "@expected"', array('@version' => $revision, '@expected' => $expected_revision));
      $severity = REQUIREMENT_ERROR;
    }
    $requirements['SolrPhpClient'] = array(
      'title' => $title,
      'value' => $value,
      'description' => $description,
      'severity' => $severity,
    );
  }
  else {
    $requirements['SolrPhpClient'] = array(
        'title' => $title,
        'value' => $t('<em>Missing</em>.  See the instructions in README.txt'),
        'description' => $t('The Solr PHP library must be present in a sub-directory named SolrPhpClient.'),
        'severity' => REQUIREMENT_ERROR,
    );
  }
  return $requirements;
}

/**
 * Implements hook_install().
 */
function apachesolr_install() {
  // Create one MLT block.
  require_once(drupal_get_path('module', 'apachesolr') .'/apachesolr.admin.inc');
  apachesolr_mlt_save_block(array('name' => t('More like this')));
  db_insert('apachesolr_server')->fields(array('server_id' => 'solr', 'name' => 'Apache Solr server', 'host' => 'localhost', 'port' => '8983', 'path' => '/solr'))->execute();
  variable_set('apachesolr_default_server', 'solr');
  drupal_set_message(t('Apache Solr is enabled. Visit the <a href="!settings_link">settings page</a>.', array('!settings_link' => url('admin/config/search/apachesolr'))));
}

/**
 * Implements hook_enable().
 */
function apachesolr_enable() {
  // Completely build the index table.
  apachesolr_rebuild_index_table();
}

/**
 * Implements hook_schema().
 *
 * TODO: move all node indexing/seach code to apachesolr_search
 */
function apachesolr_schema() {
  $schema['apachesolr_search_node'] = array(
    'description' => t('Stores a record of when a node property changed to determine if it needs indexing by Solr.'),
    'fields' => array(
      'nid' => array(
        'description' => t('The primary identifier for a node.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE),
      'status' => array(
        'description' => t('Boolean indicating whether the node is published (visible to non-administrators).'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1),
      'changed' => array(
        'description' => t('The Unix timestamp when a node property was changed.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0),
      ),
    'indexes' => array(
      'changed' => array('changed', 'status'),
      ),
    'primary key' => array('nid'),
  );
  $table = drupal_get_schema_unprocessed('system', 'cache');
  $table['description'] = 'Cache table for apachesolr to store Luke data and indexing information.';
  $schema['cache_apachesolr'] = $table;

  $schema['apachesolr_server'] = array(
    'description' => 'The Solr server table.',
    'fields' => array(
     'server_id' => array(
        'description' => 'Unique identifier for the server',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Human-readable name for the server',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
      'scheme' => array(
        'description' => 'Preferred scheme for the registered server',
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => 'http'
      ),
      'host' => array(
        'description' => 'Host name for the registered server',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
      'port' => array(
        'description' => 'Port number for the registered server',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'path' => array(
        'description' => 'Path to the registered server',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
      'service_class' => array(
        'description' => 'Optional class name to use for connection',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
    ),
    'primary key' => array('server_id'),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function apachesolr_uninstall() {
  variable_del('apachesolr_default_server');
  variable_del('apachesolr_rows');
  variable_del('apachesolr_facet_query_limits');
  variable_del('apachesolr_facet_query_limit_default');
  variable_del('apachesolr_site_hash');
  variable_del('apachesolr_index_last');
  variable_del('apachesolr_mlt_blocks');
  variable_del('apachesolr_cron_limit');
  variable_del('apachesolr_enabled_facets');
  // Remove blocks.
  db_delete('block')->condition('module', 'apachesolr')->execute();
}

/**
 * Add a table to track Solr servers.
 */
function apachesolr_update_7000() {

  $schema['apachesolr_server'] = array(
    'description' => 'The Solr server table.',
    'fields' => array(
     'server_id' => array(
        'description' => 'Unique identifier for the server',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Human-readable name for the server',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
      'scheme' => array(
        'description' => 'Preferred scheme for the registered server',
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => 'http'
      ),
      'host' => array(
        'description' => 'Host name for the registered server',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
      'port' => array(
        'description' => 'Port number for the registered server',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'path' => array(
        'description' => 'Path to the registered server',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
      'service_class' => array(
        'description' => 'Optional class name to use for connection',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
    ),
    'primary key' => array('server_id'),
  );
  db_create_table('apachesolr_server', $schema['apachesolr_server']);
  // Insert into the table the current single server record.
  $host = variable_get('apachesolr_host', 'localhost');
  $port = variable_get('apachesolr_port', '8983');
  $path = variable_get('apachesolr_path', '/solr');
  db_insert('apachesolr_server')->fields(array('server_id' => 'solr', 'name' => 'Apache Solr server', 'host' => $host, 'port' => $port, 'path' => $path))->execute();
  variable_set('apachesolr_default_server', 'solr');
  variable_del('apachesolr_host');
  variable_del('apachesolr_port');
  variable_del('apachesolr_path');
  $value = variable_get('apachesolr_service_class', NULL);
  if (is_array($value)) {
    list($module, $filepath, $class) = $value;
    variable_set('apachesolr_service_class', $class);
  }
  variable_del('apachesolr_logging');
}


/**
 * Re-jigger the schema to use fewer, shorter keys.
 */
function apachesolr_update_7001() {
  if (db_field_exists('apachesolr_server', 'asid')) {
    // You installed the beta1 and need to be fixed up.
    db_drop_field('apachesolr_server', 'asid');
    db_drop_unique_key('apachesolr_server', 'server_id');
    db_add_primary_key('apachesolr_server', array('server_id'));
    db_drop_unique_key('apachesolr_server', 'host_post_path');
    db_change_field('apachesolr_server', 'port', 'port',
      array(
        'description' => 'Port number for the registered server',
        'type' => 'int',
        'not null' => TRUE,
      )
    );
  }
}
