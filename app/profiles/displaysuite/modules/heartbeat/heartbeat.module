<?php
// $Id: heartbeat.module,v 1.1.2.26.2.46.2.73.2.2 2010/08/14 13:17:57 stalski Exp $

/**
 * @file
 * Heartbeat module file
 */

module_load_include('inc', 'heartbeat', 'heartbeat.common');

/**
 * Message access
 *
 * What people can see and are entitled to see. This permission
 * on messages can be set as default per Heartbeat stream but
 * can be overriden in the configuration of a heartbeat message.
 */

// Always block from display
define('HEARTBEAT_NONE', -1);

// Display only activity messages that are mine or addressed to me
define('HEARTBEAT_PRIVATE', 0);

// Everyone can see this activity message, unless this type of message is set to private
define('HEARTBEAT_PUBLIC_TO_ALL', 1);

// Display activity message of all my user relations, described in contributed modules
define('HEARTBEAT_PUBLIC_TO_CONNECTED', 2);

// Only the person that is chosen by the actor, can see the message
define('HEARTBEAT_PUBLIC_TO_ADDRESSEE', 3);

/**
 * Heartbeat message states to describe how they were built
 */

// Default messages with codebase
define('HEARTBEAT_MESSAGE_DEFAULT', 0);

// Custom built messages with UI
define('HEARTBEAT_MESSAGE_CUSTOM', 1);

// Default messages that are changed by UI
define('HEARTBEAT_MESSAGE_CHANGED', 2);

/**
 * Implements hook_help().
 */
function heartbeat_help($path, $arg) {
  switch ($path) {
    case 'admin/help#heartbeat':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      return $output;
    case 'admin/structure/heartbeat':
      return '<p>' . t('Heartbeat activity lets you create streams, composed together with message templates that are parsed into activity messages.') . '</p>';
  }
}

/**
 * Implements hook_init().
 */
function heartbeat_init() {

  global $user, $language;

  drupal_add_js(drupal_get_path('module', 'heartbeat') . '/heartbeat.js');
  drupal_add_js(array('heartbeat_language' => $language->language), "setting");

  if (!isset($user->heartbeat_relations)) {
    $user->heartbeat_relations = array();
  }
}

/**
 * Implements hook_cron().
 *   Delete too old message if this option is set
 */
function heartbeat_cron() {

  $maximum_time = variable_get('heartbeat_activity_log_cron_delete', 2678400);
  if ($maximum_time) {

    db_delete('heartbeat_activity')
      ->condition('timestamp', $_SERVER['REQUEST_TIME'] - $maximum_time, '<')
      ->execute();
  }
}

/**
 * Implements hook_perm().
 */
function heartbeat_perm() {
  return array(
    'configure heartbeat',
    'configure heartbeat messages',
    'delete heartbeat activity logs',
    'delete own heartbeat activity logs',
    'view heartbeat messages',
    'maintain own activity',
    'view personal heartbeat activity'
  );
}

/**
 * Implementation of hook_flush_caches().
 */
function heartbeat_flush_caches() {
  // Import default data on cache clear
  heartbeat_import_streams();
  heartbeat_import_message_templates();
}

/**
 * Implements hook_menu().
 */
function heartbeat_menu() {

  $items = array();

  // Menu page callbacks for each heartbeat stream.
  $streams = variable_get('heartbeat_streams', array());
  foreach ($streams as $stream => $type) {
    $items['heartbeat/%'] = array(
      'title callback' => 'heartbeat_messages_title',
      'title arguments' => array(1),
      'description' => $type['name'] . ' page',
      'page callback' => 'heartbeat_messages_page',
      'page arguments' => array(1),
      'access callback' => '_heartbeat_stream_has_access',
      'access arguments' => array(1),
      'file' => 'heartbeat.pages.inc',
    );
  }

  // Add menu items for user profile tasks
  foreach (variable_get('heartbeat_stream_data', array()) as $stream_name => $data) {
    if (isset($data['profile']) && $data['profile'] == 1) {
      $items['user/%user/heartbeat/' . $stream_name] = array(
        'title callback' => 'heartbeat_messages_title',
        'title arguments' => array($stream_name),
        'page callback' => 'heartbeat_messages_page',
        'page arguments' => array($stream_name, '0', 1),
        'access callback' => '_heartbeat_stream_has_access',
        'access arguments' => array($stream_name),
        'type' => MENU_LOCAL_TASK,
        'file' => 'heartbeat.pages.inc',
        'weight' => 50,
      );
    }
  }

  // Build menu
  $items['admin/structure/heartbeat'] = array(
    'title' => 'Heartbeat',
    'description' => 'Administer messages for heartbeat.',
    'weight' => -5,
    'page callback' => 'heartbeat_messages_overview',
    'access arguments' => array('configure heartbeat messages'),
    'file' => 'heartbeat.admin.inc',
  );
  $items['admin/structure/heartbeat/list'] = array(
    'title' => 'List message templates',
    'description' => 'Overview messages',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -5,
  );
  $items['admin/structure/heartbeat/add'] = array(
    'title' => 'Add heartbeat message template',
    'description' => 'Administer message for heartbeat.',
    'weight' => -4,
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array( 'heartbeat_messages_add'),
    'access arguments' => array('configure heartbeat messages'),
    'file' => 'heartbeat.admin.inc',
  );
  $items['admin/structure/heartbeat/export'] = array(
    'title' => 'Export message templates',
    'description' => 'Export messages to use as default.',
    'weight' => -3,
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array( 'heartbeat_messages_export'),
    'access arguments' => array('configure heartbeat messages'),
    'file' => 'heartbeat.admin.inc',
  );
  $items['admin/structure/heartbeat/streams'] = array(
    'title' => 'Heartbeat streams',
    'weight' => 0,
    'description' => 'Administer heartbeat streams.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array( 'heartbeat_messages_streams'),
    'access arguments' => array('configure heartbeat messages'),
    'file' => 'heartbeat.admin.inc',
  );
  // Administer settings
  $items['admin/structure/heartbeat/settings'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'heartbeat settings',
    'description' => 'Administer settings for heartbeat.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('heartbeat_admin_settings'),
    'access arguments' => array('configure heartbeat'),
    'file' => 'heartbeat.admin.inc',
    'weight' => 1,
  );
  $items['admin/structure/heartbeat/cache-clear'] = array(
    'title' => 'Delete activity logs',
    'description' => 'Delete heartbeat activity logs.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('heartbeat_delete_logs_confirm'),
    'access arguments' => array('delete heartbeat activity logs'),
    'file' => 'heartbeat.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  // Callbacks
  $items['admin/structure/heartbeat/stream/%heartbeat_stream'] = array(
    'title' => 'Configure heartbeat activity stream',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('heartbeat_activity_stream_configure', 4),
    'access arguments' => array('configure heartbeat messages'),
    'file' => 'heartbeat.admin.inc',
  );
  $items['admin/structure/heartbeat/edit/%heartbeat_message_template'] = array(
    'title' => 'Edit heartbeat message',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array( 'heartbeat_messages_edit', 4),
    'access arguments' => array('configure heartbeat messages'),
    'file' => 'heartbeat.admin.inc',
  );
  $items['admin/structure/heartbeat/revert/%heartbeat_message_template'] = array(
    'title' => 'Revert heartbeat message',
    'description' => 'Revert message back to default.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array( 'heartbeat_revert_confirm', 4),
    'access arguments' => array('configure heartbeat messages'),
    'file' => 'heartbeat.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/heartbeat/delete/%heartbeat_message_temlate'] = array(
    'title' => 'Delete heartbeat message',
    'description' => 'Administer deletions of messages.',
    'type' => MENU_CALLBACK,
    'page callback' => 'heartbeat_messages_delete',
    'page arguments' => array(4),
    'access arguments' => array('configure heartbeat messages'),
    'file' => 'heartbeat.admin.inc',
  );

  // Callbacks to trigger an action.
  $items['heartbeat/delete/%'] = array(
    'title' => 'Delete activity log',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('heartbeat_delete_log_confirm', 2),
    'access callback' => '_heartbeat_message_delete_access',
    'access arguments' => array(2),
    'file' => 'heartbeat.pages.inc',
    'type' => MENU_CALLBACK,
  );

  // Javascript driven callbacks
  $items['heartbeat/autocomplete/tag'] = array(
    'access callback' => 'user_access',
    'access arguments' => array('configure heartbeat messages'),
    'file' => 'heartbeat.admin.inc',
    'type' => MENU_CALLBACK,
    'page callback' => 'heartbeat_autocomplete_tag',
  );
  $items['heartbeat/ahah/%'] = array(
    'page callback' => 'heartbeat_activity_ahah',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('configure heartbeat'),
    'type' => MENU_CALLBACK,
    'file' => 'heartbeat.admin.inc',
  );
  $items['heartbeat/js/poll'] = array(
    'page callback' => 'heartbeat_activity_poll',
    'access callback' => 'user_access',
    'access arguments' => array('view heartbeat messages'),
    'type' => MENU_CALLBACK,
    'file' => 'heartbeat.pages.inc',
  );
  
  return $items;
  
}

/**
 * Implements hook_theme().
 */
function heartbeat_theme() {
  return array(
    'heartbeat_block' => array(
      'variables' => array('messages' => array(), 'heartbeatAccess' => NULL, 'link' => ''),
    ),
    'heartbeat_list' => array(
      'variables' => array('messages' => array(), 'heartbeatAccess' => NULL, 'link' => ''),
    ),
    'heartbeat_messages' => array(
      'variables' => array('messages' => array(), 'heartbeatAccess' => NULL, 'link' => ''),
    ),
    'heartbeat_message_row' => array(
      'variables' => array('message' => NULL),
      'template' => 'heartbeat-message-row'
    ),
    'heartbeat_filters' => array(
      'variables' => array('stream' => NULL),
    ),
    'heartbeat_buttons' => array(
      'variables' => array('message' => NULL),
    ),
    'heartbeat_time_ago' => array(
      'variables' => array('message' => NULL),
    ),
    'heartbeat_message_user_select_form' => array(
      'render element' => 'form',
    ),
    'heartbeat_stream_overview' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function heartbeat_block_info() {

  if (!user_access('view heartbeat messages')) {
    return FALSE;
  }

  $blocks = array();
  $streams = variable_get('heartbeat_streams', array());

  // A block foreach stream.
  foreach ($streams as $key => $stream) {
    $blocks[$key]['info'] = drupal_ucfirst($stream['name']);
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function heartbeat_block_view($delta = '') {

  // Message streams for each stream.
  $context = heartbeat_stream_view($delta);

  if (isset($context)) {
    $messages = $context->execute();
    $heartbeatAccess = $context->getState();
    $block['subject'] = t($heartbeatAccess->stream->title);

    $link = '';
    if ($context->hasMoreMessages(FALSE)) {
      $last_message = end($messages);
      $link = heartbeat_stream_more_link($heartbeatAccess, $last_message->timestamp, FALSE);
    }

    $block['content'] = theme('heartbeat_block', array('messages' => $messages, 'heartbeatAccess' => $heartbeatAccess, 'link' => $link));

    return $block;

  }
}

/**
 * Implements hook_block_configure().
 */
function heartbeat_block_configure($delta = '') {

  $streams = variable_get('heartbeat_streams', array());
  $form = array('items' => array(
    '#type' => 'checkbox',
    '#title' => t('Show activity for the displayed user on the user profile page'),
    '#description' => t('By default heartbeat will show activity in relation to the
      currently logged in user.  With this setting enabled and only on the user profile page,
      the messages will be shown in relation to the user profile.'),
    '#default_value' => variable_get('heartbeat_show_user_profile_messages_' . drupal_strtolower($streams[$delta]['class']), 0),
  ));

  return $form;
}

/**
 * Implements hook_block_save().
 */
function heartbeat_block_save($delta = '', $edit = array()) {
  $streams = variable_get('heartbeat_streams', array());
  $class = drupal_strtolower($streams[$delta]['class']);
  variable_set('heartbeat_show_user_profile_messages_' . $class, $edit['items']);
}

/**
 * Implements hook_node_delete().
 */
function heartbeat_node_delete($node) {

  // Delete messages from deleted nodes
  // Visa versa could be done custom but at the
  // time of writing, i did not implement this.
  db_delete('heartbeat_activity')
      ->condition('nid', $node->nid)
      ->execute();
}

/**
 * Implements of hook_user_load().
 */
function heartbeat_user_load(& $users) {
  /*foreach (heartbeat_get_related_uids($account->uid) as $key => $account) {
    $users[$account->uid]->heartbeat_relations[] = $account->uid;
  }*/
}


/**
* Implements hook_user_form().
*/
function heartbeat_user_form(&$edit, &$account, $category = NULL) {

  if (($category == 'account') && user_access('maintain own activity', $account)) {

    $form['heartbeat_activity_settings_select'] = _theme_user_message_select_form(
      t('Heartbeat activity settings'),
      isset($edit['heartbeat_activity_settings']) ? $edit['heartbeat_activity_settings'] : NULL
    );

    return $form;
  }
}

/**
 * Implements heartbeat_register_streams().
 */
function heartbeat_heartbeat_register_streams() {
  return array(
    0 => array(
      'name' => 'Personal Heartbeat',
      'class' => 'PrivateHeartbeat',
      'path' => 'includes/privateheartbeat.inc',
      'module' => 'heartbeat',
      'access' => array('view personal heartbeat activity')
    ),
    1 => array(
      'name' => 'Public Heartbeat',
      'class' => 'PublicHeartbeat',
      'path' => 'includes/publicheartbeat.inc',
      'module' => 'heartbeat',
      'access' => TRUE
    ),
    2 => array(
      'name' => 'Single activity',
      'class' => 'SingleHeartbeat',
      'path' => 'includes/singleheartbeat.inc',
      'module' => 'heartbeat',
      'access' => TRUE
    ),
  );
}

/**
 * Implements hook_heartbeat_stream_filters().
 */
function heartbeat_heartbeat_stream_filters() {
  return array(
    'all' => array('name' => t('All'))
  );
}

/**
 * Implements hook_heartbeat_message_template_info().
 */
function heartbeat_heartbeat_message_template_info() {

  $info = array(

    /**
     * Default node messages
     */
    2 => array(
      'message' => '!username has updated !node_type "!node_title"',
      'message_concat' => '!username has updated %node_title%',
      'message_id' => 'heartbeat_edit_node',
      'concat_args' =>
      array(
        'type' => 'summary',
        'group_by' => 'user',
        'group_target' => 'node_title',
        'merge_separator' => ', ',
        'merge_end_separator' => ' and ',
      ),
      'description' => 'When editing a node, log the users activity',
      'perms' => '1',
      'custom' => '0',
      'variables' =>
      array(
        '@username' => '[node:author-name-url]',
        '@node_type' => '[node:type]',
        '@node_title' => '[node:title-link]',
      ),
    ),
    3 =>
    array(
      'message' => '!username has added !node_type !node_title.',
      'message_concat' => '!username has added the following !types: %node_title%.',
      'message_id' => 'heartbeat_add_node',
      'concat_args' =>
      array(
        'type' => 'summary',
        'group_by' => 'user',
        'group_target' => 'node_title',
        'merge_separator' => ', ',
        'merge_end_separator' => ' and ',
      ),
      'description' => 'User adds a node, save user activity',
      'perms' => '1',
      'custom' => '0',
      'variables' =>
      array(
        '@username' => '[user:user-name-url]',
        '@node_type' => '[node:type-name]',
        '@node_title' => '[node:title-link]',
        '@types' => '[node:type-name]s',
      ),
    ),


    /**
     * Default comment messages
     */
    4 =>
    array(
      'message' => '!username replied on !title:
      <blockquote><div>!comment</div></blockquote>',
      'message_concat' => '!username replied on !title.',
      'message_id' => 'heartbeat_add_comment',
      'concat_args' =>
      array(
        'type' => 'count',
        'group_by' => 'none',
        'group_target' => '',
        'merge_separator' => '',
        'merge_end_separator' => '',
      ),
      'description' => 'user replied on some content',
      'perms' => '1',
      'custom' => '0',
      'variables' =>
      array(
        '@username' => '[user:user-name-url]  ',
        '@title' => '[node:title-link]',
        '@comment' => '[comment:comment-body-raw]',
      ),
    ),

    5 =>
    array(
      'message_id' => 'heartbeat_edit_comment',
      'message' => '!username changed his comment on !title.',
      'message_concat' => '!username changed his comment on !title several times (%times%).',
      'concat_args' =>
      array(
        'type' => 'count',
        'merge_target' => 'times',
        'merge_separator' => '',
        'merge_end_separator' => '',
      ),
      'perms' => '1',
      'custom' => '0',
      'description' => 'user changed his comment',
      'variables' =>
      array(
        '@username' => '[user:user-name-url]',
        '@title' => '[node:title-link]',
      ),
    ),

    6 =>
    array(
      'message_id' => 'heartbeat_edit_account',
      'message' => '!username\'s personal account page has been changed.',
      'message_concat' => '',
      'concat_args' =>
      array(
        'type' => 'single',
        'merge_target' => '',
        'merge_separator' => '',
        'merge_end_separator' => '',
      ),
      'perms' => '1',
      'custom' => '0',
      'description' => 'user changed his/her account',
      'variables' =>
      array(
        '@username' => '[user:user-name-url]',
      ),
    ),

  );


  if (module_exists('image')) {
    $info[7] = array(
      'message' => '!username has added !title.<div class="images">!image</div>',
      'message_concat' => '!username has added %images%',
      'message_id' => 'heartbeat_add_image',
      'concat_args' =>
      array(
        'type' => 'summary',
        'group_by' => 'user',
        'group_target' => 'image',
        'merge_separator' => ' ',
        'merge_end_separator' => ' ',
      ),
      'description' => 'When adding an image, log the users activity',
      'perms' => '1',
      'custom' => '0',
      'variables' =>
      array(
        '@username' => '[node:user-name-url]',
        '@title' => '[node:title-link]',
        '@image' => '',
      ),
    );
  }
  return $info;
}

/**
 * Heartbeat API functions.
 */

/**
 * API function to log a message from custom code
 *
 * @param string $message_id
 *   Id of the message that is known in the message
 * @param integer $uid
 *   Actor or user performing the activity
 * @param integer $uid_target [optional]
 *   user id of the target user if present. Target users can be an addresse or a
 *   user relation transaction with the actor $uid
 * @param integer $nid [optional]
 *   Node id for content (for context node)
 * @param integer $nid_target [optional]
 *   Node id for content that is related to other content
 * @param array $variables [optional]
 *   Variables can be used if you used them in the used message. Take care to use
 *   the @-sign for words that are prefix with the question mark sign in the messages
 * @param integer $access
 *   The access to restrict the message
 */
function heartbeat_api_log($message_id, $uid, $uid_target = 0, $nid = 0, $nid_target = 0, $variables = array(), $access = HEARTBEAT_PUBLIC_TO_ALL) {

  $data = array();
  // Normal form values
  $data['message_id'] = $message_id;
  $data['uid'] = $uid;
  $data['uid_target'] = $uid_target;
  $data['nid'] = $nid;
  $data['nid_target'] = $nid_target;
  $data['access'] = $access;

  if (!empty($variables) && is_array($variables)) {
    $data['variables'] = heartbeat_encode_message_variables($variables);
  }

  return heartbeat_log($data);
}

/**
 * User activity logger function
 * @param   The data to add one row
 */
function heartbeat_log($data, $args = array()) {

  global $user;

  // Relational message of heartbeat messages
  $row = heartbeat_message_template_load($data['message_id']);
  $template = new HeartbeatMessageTemplate($row->hid, $row->message_id, $row->message, $row->message_concat, $row->concat_args);
  $data = $data + (array)$row;

  $heartbeatactivity = new HeartbeatActivity($data, $template);

  return $heartbeatactivity->save($args);
}

/**
 * Theme functions and their helpers.
 */

/**
 * Theme function for a block of heartbeat activity messages.
 */
function theme_heartbeat_block($variables) {

  $messages = $variables['messages'];
  $heartbeatAccess = $variables['heartbeatAccess'];
  $link = $variables['link'];

  $output = theme('heartbeat_list', array('messages' => $messages, 'heartbeatAccess' => $heartbeatAccess, 'link' => $link));

  return $output;
}

/**
 * Theme function for the filters on streams.
 */
function theme_heartbeat_filters($variables) {

  $stream = $variables['streams'];

  $output = '';

  if (!empty($stream->filters)) {

    $active_filters = $new_filter = array();
    $path = $_GET['q'];
    $output = '<ul class="heartbeat-filters">';
    $cumul = $stream->filters_cumul;
    $all = variable_get('heartbeat_filters', array());

    if (isset($_GET['filters'])) {
      $active_filters = drupal_map_assoc(explode(',', $_GET['filters']));
    }

    foreach ($stream->filters as $filter => $data) {

      // Check if this filter exists
      if (!isset($all[$filter])) continue;

      // Check the access (callback) for this filter
      $access = TRUE;
      if (isset($all[$filter]['access'])) {
        $access = !is_numeric($all[$filter]['access']) ? call_user_func($all[$filter]['access']) : (bool)$all[$filter]['access'];
      }
      if (!$access) continue;

      $new_filter = $active_filters;

      if (isset($active_filters[$filter])) {
        $class = 'heartbeat-filter-unset';
        unset($new_filter[$filter]);
      }
      elseif ($filter == 'all' && empty($active_filters)) {
        $class = 'heartbeat-filter-unset';
      }
      else {
        $class = 'heartbeat-filter-set';
        $new_filter[$filter] = $filter;
      }

      $output .= '<li class="heartbeat-filter ' . $class . '">';

      $fragment = 'heartbeat-stream-' . $stream->name;
      if ($filter == 'all' || count($new_filter) == 0) {
        $output .= l(t($all[$filter]['name']), $path, array('fragment' => $fragment));
      }
      else {
        if ($cumul) {
          $query = array('absolute' => TRUE, 'fragment' => $fragment, 'query' => array('filters' =>implode(',', $new_filter)));
        }
        else {
          $query = array('absolute' => TRUE, 'fragment' => $fragment, 'query' => array('filters' => $filter));
        }
        $output .= l(t($all[$filter]['name']), $path, $query);
      }
      $output .= '</li>';

    }
    $output .= '</ul>';
  }

  return $output;
}

/**
 * Theme function for a list of heartbeat activity messages.
 */
function theme_heartbeat_list($variables) {

  $messages = $variables['messages'];
  $heartbeatAccess = $variables['heartbeatAccess'];
  $link = $variables['link'];

  global $user, $language;

  $content = '';

  drupal_add_css(drupal_get_path('module', 'heartbeat') . '/heartbeat.css');

  $stream_name = drupal_strtolower($heartbeatAccess->getAccess());
  $stream = $heartbeatAccess->stream;

  if ($stream->display_filters) {
    $content .= theme('heartbeat_filters', array('stream' => $stream));
  }

  $class = $heartbeatAccess->isPage() ? 'page' : 'block';

  $content .= '<div id="heartbeat-stream-' . $stream_name . '" class="heartbeat-' . $class  . ' heartbeat-stream heartbeat-stream-' . $stream_name . '">';
  $content .= '<div class="heartbeat-messages-wrapper">';

  if (empty($messages)) {
    $content .= '<p>' . t('<em>No activity yet.</em>') . '</p>';
  }
  else {
    $content .= theme('heartbeat_messages', array('messages' => $messages, 'heartbeatAccess' => $heartbeatAccess, 'link' => $link));
  }

  $content .= '</div>';
  $content .= '</div>';

  return $content;
}

/**
 * Theme function for the widgets of a message
 */
function _theme_heartbeat_widgets(&$message) {

  $widgets = array();

  $message_attachments = $message->template->attachments;
  if ($message_attachments && is_array($message_attachments)) {

    foreach ($message_attachments as $field => $attachment) {

      if (!empty($attachment)) {

        if (isset($attachment['_rendered'])) {
          $widgets[] = $attachment['_rendered'];
        }
        elseif (function_exists($func = $field . '_widget')) {
          $widgets[] = $func($message_attachments, $message);
        }
      }
    }
  }

  return implode('', $widgets);
}

/**
 * Theme function for the widgets of a message
 */
function theme_heartbeat_time_ago($variables) {

  $message = $variables['message'];
  
  $time_info = '';
  
  if ($message->show_message_times) {
    $message_date = _theme_time_ago($message->timestamp);
    if ($message->target_count <= 1 || $message->show_message_times_grouped) {
      $time_info = $message_date;
    }
  }

  return $time_info;
}

/**
 * Theme function for messages buttons
 */
function theme_heartbeat_buttons($variables) {

  $message = $variables['message'];

  global $user;
  $buttons = array();
  if ($message->delete_access || ($message->actor_access && $message->uid == $user->uid)) {
    $buttons[] = '<span class="hover-delete">' . l(t('Delete'), 'heartbeat/delete/' . $message->uaid, array('query' => drupal_get_destination())) . '</span>';
  }

  return implode('', $buttons);
}

/**
 * Theme function for messages
 */
function theme_heartbeat_messages($variables) {

  $messages = $variables['messages'];
  $heartbeatAccess = $variables['heartbeatAccess'];
  $link = $variables['link'];
  
  $content = '';

  foreach ($messages as $key => $message) {

    $message->content['message'] = $message->message;

    $message->content['widgets'] = _theme_heartbeat_widgets($message);

    $message->content['time_info'] = theme('heartbeat_time_ago', array('message' => $message));
    $message->content['buttons'] = theme('heartbeat_buttons', array('message' => $message));

    $content .= theme('heartbeat_message_row', array('message' => $message));
    
  }

  $content .= $link;

  return $content;
}

/**
 * Theme function for the user profile form.
 */
function theme_heartbeat_message_user_select_form($variables) {

  $form = $variables['form'];
  
  $rows = array();
  foreach (element_children($form) as $key) {
    $row = array();
    if (isset($form[$key]['title']) && is_array($form[$key]['title'])) {
      $row[] = drupal_render($form[$key]['title']);
      $row[] = drupal_render($form[$key]['access']);
    }
    $rows[] = $row;
  }

  $headers = array(t('Message types'), t('Operations'));
  $output = theme('table', array('headers' => $headers, 'rows' => $rows));

  return $output;
}

/**
 * Helper theme function for the activity selection
 *   in the user profile form
 */
function _theme_user_message_select_form($title, $settings) {

  if (empty($settings)) {
    $settings = array();
  }

  $templates = heartbeat_messages('all', FALSE);
  $options = _heartbeat_perms_options(TRUE);

  $form['heartbeat_activity_settings'] = array(
    '#type'   => 'fieldset',
    '#title'  => $title,
    '#weight' => 4,
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#description' => t('This setting lets you configure the visibility of activity messages.'),
    '#theme' => 'heartbeat_message_user_select_form',
  );

  foreach ($templates as $template) {

    $form['heartbeat_activity_settings'][$template->message_id]['title'] = array(
      '#value' => !empty($template->description) ? $template->description : str_replace('_', ' ', $template->message_id),
    );
    $form['heartbeat_activity_settings'][$template->message_id]['access'] = array(
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => isset($settings[$template->message_id]['access']) ? $settings[$template->message_id]['access'] : HEARTBEAT_PUBLIC_TO_ALL,
    );

  }

  return $form;
}

/**
 * Helper function for a more link on streams (older messages)
 * Should only be called when hasMoreMessages resulted to TRUE
 */
function heartbeat_stream_more_link($heartbeatAccess, $offset_time, $page = TRUE, $absolute = FALSE) {

  $ajax_pager = $page ? $heartbeatAccess->getStream()->page_pager_ajax : $heartbeatAccess->getStream()->block_show_pager == 2;
  $path = 'heartbeat/' . $heartbeatAccess->getAccess();
  $attributes = array('html' => FALSE, 'attributes' => array('class' => 'heartbeat-older-messages'));

  if (isset($_GET['filters'])) {
    $attributes['query'] = array('filters' => $_GET['filters']);
  }
  if ($absolute) {
    $attributes['absolute'] = TRUE;
  }

  // Blocks link to the pages
  if (!$page && !$ajax_pager) {
    return '<div class="more fullarchive">' . l(t('Full list'), $path, $attributes) . '</div>';
  }
  else {

    $path .= '/' . $offset_time;

    if ($ajax_pager) {
      $attributes['attributes']['onclick'] = 'javascript:Drupal.heartbeat.getOlderMessages(this, ' . (int)$page . '); return false;';
    }

    return l(t('Older messages'), $path, $attributes);
  }

}

/**
 * Autoloaders, bulk updates and deletions.
 */

/**
 * get all messages with static cache variable
 *  and reset possibility
 *
 * @param string $module
 * @param boolean $reset
 * @param boolean $objects
 * @return array messages
 */
function heartbeat_messages($message_id = 'all', $reset = FALSE) {

  static $messages;

  if (empty($messages) || $reset == TRUE) {

    $messages = array();
    if ($message_id == 'all') {
      $result = db_query("SELECT * FROM {heartbeat_messages} ORDER BY hid, message_id, description ");
    }
    else {
      $result = db_query("SELECT * FROM {heartbeat_messages} WHERE message_id =:message_id ", array(':message_id' => $message_id));
    }
    
    foreach ($result as $row) {
    	
        $template = new HeartbeatMessageTemplate($row->hid, $row->message_id, $row->message, $row->message_concat, $row->concat_args);
        $template->perms = $row->perms;
        $template->custom = $row->custom;
        $template->description = $row->description;
        $template->set_variables($row->variables);
        $template->set_attachments($row->attachments);
        $template->set_roles(isset($template->concat_args['roles']) ? $template->concat_args['roles'] : array());

        $messages[] = $template;
        
    }
  }

  return $messages;
}

/**
 * Fetches the translatable message for corresponding action
 *
 * @param string $hid
 */
function heartbeat_message_activity_load($uaid) {

  return db_fetch_object(db_query_range("SELECT * from {heartbeat_activity} WHERE  uaid =:uaid ", 0, 1, array(':uaid' => $uaid)));
}

/**
 * Fetches the heartbeat message template.
 * @param string $message_id String Message id
 */
function heartbeat_message_template_load($message_id) {

  $result = db_select('heartbeat_messages', 'hm')
    ->fields('hm')
    ->condition('message_id', $message_id)
    ->execute();

  if ($result) {

    $message = $result->fetchObject();
    $message = (object) $message;

    if (!empty($message->attachments)) {
      $attachments = unserialize($message->attachments);
      $message->attachments = $attachments ? $attachments : array();
    }

    $message->concat_args = heartbeat_decode_message_variables($message->concat_args);
    $message->roles = isset($message->concat_args['roles']) ? $message->concat_args['roles'] : array();

    $message->variables = heartbeat_decode_message_variables($message->variables);

    $message->tags = heartbeat_get_available_tags($message->hid);
  }
  
  return $message;
  
}

/**
 * Inserts a heartbeat message template.
 * @param $record Object with all properties.
 */
function heartbeat_message_template_insert($record) {

  $record = heartbeat_message_template_prepare($record);

  $last_id = db_insert('heartbeat_messages')
    ->fields(array(
      'message_id' => $record->message_id,
      'message' => $record->message,
      'message_concat' => $record->message_concat,
      'attachments' => $record->attachments,
      'concat_args' => $record->concat_args,
      'perms' => $record->perms,
      'custom' => $record->custom,
      'description' => $record->description,
      'variables' => $record->variables,
    ))
    ->execute();

  if (isset($record->tags) && $last_id) {
    heartbeat_edit_tags($last_id, $record->tags);
  }

  return $last_id;
}

/**
 * Updates a heartbeat message template.
 * @param $record Object with all properties.
 */
function heartbeat_message_template_update($record) {

  $record = heartbeat_message_template_prepare($record);

  heartbeat_edit_tags($record->hid, $record->tags);

  return db_update('heartbeat_messages')
    ->fields(array(
      'message' => $record->message,
      'message_concat' => $record->message_concat,
      'attachments' => $record->attachments,
      'variables' => $record->variables,
      'description' => $record->description,
      'concat_args' => $record->concat_args,
      'perms' => $record->perms,
      'custom' => $record->custom))
    ->condition('hid', $record->hid)
    ->execute();
}

/**
 * Prepares a heartbeat message template record for database storage.
 */
function heartbeat_message_template_prepare($record) {

  $record = (object)$record;

  if (isset($record->concat_args) && is_array($record->concat_args)) {
    $record->concat_args = heartbeat_encode_message_variables($record->concat_args);
  }

  if (empty($record->variables)) {
    $record->variables = array();
  }
  if (isset($record->variables) && is_array($record->variables)) {
    $record->variables = heartbeat_encode_message_variables($record->variables);
  }

  $record->attachments = serialize((isset($record->attachments) && is_array($record->attachments)) ? $record->attachments : '');

  // Set keys to default if left empty
  if (empty($record->perms)) {
    $record->perms = HEARTBEAT_PUBLIC_TO_ALL;
  }

  return $record;
}

/**
 * Function to delete heartbeat message templates.
 * @param $id Int/String The target value to delete on
 * @param $type String The key field to perform delete query on
 *   message : default
 *   module : only defined by that module
 */
function heartbeat_message_template_delete($id, $type = 'message') {
  if ($type == 'module') {
    return db_delete('heartbeat_messages')
      ->condition('module', $id)
      ->execute();
  }
  if ($type == 'message' || $type == 'message_id') {
    return db_delete('heartbeat_messages')
      ->condition('message_id', $id)
      ->execute();
  }
}

/**
 * Helper function to load a heartbeat stream
 */
function heartbeat_stream_view($stream, $page = FALSE, $offset = 0, $ajax = FALSE, $account = NULL) {

  // Message streams for each stream
  $type = _heartbeat_stream_has_access($stream);
  if ($type) {

    heartbeat_include('HeartbeatStream');
    heartbeat_include('HeartbeatMessageBuilder');
    heartbeat_include('HeartbeatParser');
    heartbeat_include($type['class'], $type['module'], $type['path']);
    $accesstype = $type['class'];

    $stream = new HeartbeatStream($type);
    $heartbeatAccess = new $accesstype($stream, $page, $account);

    // Set the js variable to poll for newer messages
    if ($heartbeatAccess->stream->poll_messages == 100) {
      // Use XMPP to serve the activity
    }

    drupal_add_js(array('heartbeatPollNewerMessages' => array(drupal_strtolower($accesstype) => $heartbeatAccess->stream->poll_messages)), 'setting');

    $heartbeatAccess->setOffsetSql($offset);

    $context = new HeartbeatMessageBuilder($heartbeatAccess);

    if (!$context->hasErrors()) {
      return $context;
    }
  }

  return NULL;
}

/**
 * Helper function to load a heartbeat stream
 */
function heartbeat_stream_load($stream) {

  if (is_string($stream)) {
    $streams = variable_get('heartbeat_streams', array());
    foreach ($streams as $type) {
      if (drupal_strtolower($type['class']) == drupal_strtolower($stream)) {
        return $type;
      }
    }
  }
  return NULL;
}

/**
 * Helper function to save a heartbeat stream.
 */
function heartbeat_stream_save($stream, $properties = array()) {
  $streams = variable_get('heartbeat_streams', array());
  foreach ($streams as $key => $type) {
    // Fix the old naming convention for backward compatibility upgrades
    // If the class name (with capitals) is a hash key, dump it
    if (drupal_strtolower($key) != $key) {
      unset($streams[$key]);
    }
    // Merge the new values for this stream configuration
    if (drupal_strtolower($type['class']) == drupal_strtolower($stream)) {
      $streams[$key] = array_merge($streams[$key], $properties);
    }
  }
  variable_set('heartbeat_streams', $streams);

  drupal_set_message('Activity stream settings saved.');
}

/**
 * Edit (add, update) the heartbeat tags
 */
function heartbeat_edit_tags($hid, $_tags) {

  $stored_tags = heartbeat_get_available_tags();
  $message_tags = heartbeat_get_available_tags($hid);

  $tags = empty($_tags) ? array() : (is_string($_tags) ? explode(",", $_tags) : $_tags);

  // Insert non existing tags
  if (!empty($tags)) {
    foreach ($tags as $tag) {
      $tag = trim($tag);

      // If the tag itself is not known yet, insert it
      if (!in_array($tag, $stored_tags)) {
        $last_htid = db_insert('heartbeat_tags')->fields(array('name', $tag));
      }
      else {
        $last_htid = array_search($tag, $message_tags) | array_search($tag, $stored_tags);
      }

      // The tag certainly exists now, check if it's linked to this message yet
      if (!isset($message_tags[$last_htid])) {
        db_insert('heartbeat_mt')->fields(array('htid' => $last_htid, 'hid' => $hid));
      }
    }
  }

  // Check if tags should be deleted
  if (!empty($message_tags)) {
    foreach ($message_tags as $htid => $message_tag) {
      if (!in_array($message_tag, $tags)) {

        // Always check if this was the last reference to the tag
        if (db_query("SELECT COUNT(mtid) FROM {heartbeat_tags} ht INNER JOIN {heartbeat_mt} hmt ON ht.htid = hmt.htid WHERE ht.name =:htname", array(':htname' => $message_tag))->fetchField() == 1) {
          db_query("DELETE FROM {heartbeat_tags} WHERE htid =:htid", array(':htid' => $htid));
        }

        // Delete the reference to the heartbeat message
        db_query("DELETE FROM {heartbeat_mt} WHERE hid =:hid AND htid =:htid", array(':hid' => $hid, ':htid' => $htid));
      }
    }
  }

  return TRUE;
}

/**
 * Data handling.
 */

/**
 * Import the heartbeat streams and filters.
 */
function heartbeat_import_streams() {
	
  $used = variable_get('heartbeat_streams', array());

  // On install these default messages are not found,
  // so append heartbeat for sure
  $types = array();
  if (!module_exists('heartbeat')) {
    $types = heartbeat_heartbeat_register_streams();
  }
  $types += module_invoke_all('heartbeat_register_streams');

  if (!empty($types)) {

    foreach ($types as $k => $type) {

      heartbeat_include($type['class'], $type['module'], $type['path']);

      // The unique key is the class
      $key = drupal_strtolower($type['class']);

      if (!class_exists($type['class'])) {

        watchdog('heartbeat', 'No class found for ' . $type['class'], array(), WATCHDOG_ERROR);
        unset($types[$key]);
      }
      // Synchronize data defined in the hook with the data saved
      else {

        // Add new found streams
        if (!isset($used[$key])) {
          $used[$key] = $type;
        }

        // Always take these settings as new.
        $used[$key]['path'] = $type['path'];
        $used[$key]['module'] = $type['module'];
        $used[$key]['access'] = $type['access'];

        // Add and override default properties with the ones already saved
        $updated = _heartbeat_stream_defaults($used[$key]);

        // Update the used after detecting changes
        $used[$key] = $updated;

      }
    }
  }
  
  variable_set('heartbeat_streams', $used);
  
  variable_set('heartbeat_filters', module_invoke_all('heartbeat_stream_filters'));
  
}

/**
 * Import the heartbeat message templates.
 */
function heartbeat_import_message_templates() {

  // Always check the default defined heartbeat messages
  $defaults = array();
  if (!module_exists('heartbeat')) {
    $defaults = heartbeat_heartbeat_message_template_info();
  }
  $defaults += module_invoke_all('heartbeat_message_template_info');

  // Get the currently known heartbeat messages
  $stored = heartbeat_messages('all', TRUE);

  $operations = array(
    'inserted' => 0,
    'deleted' => 0
  );

  // Build hashtables for default and stored messages
  $defaults_lookup = $stored_lookup = array();
  foreach ($defaults as $default) {
    $defaults_lookup[$default['message_id']] = $default['custom'];
  }

  // First loop through the stored messages
  foreach ($stored as $key => $cached) {
    // uninstall messages that are
    // 1) not there anymore and
    // 2) are not defined as custom
    if (!isset($defaults_lookup[$cached->message_id]) && !($cached->custom & HEARTBEAT_MESSAGE_CUSTOM)) {
      heartbeat_message_template_delete($cached->message_id);
      unset($stored[$key]);
      $operations['deleted']++;
    }
    // Add the rest to the stored lookup table
    else {
      $stored_lookup[$cached->message_id] = $cached->custom;
    }
  }

  // Find new messages (if in defaults and not in stored)
  foreach ($defaults as $key => $default) {
    if (!isset($stored_lookup[$default['message_id']])) {
      heartbeat_message_template_insert($default);
      $stored[] = $default;
      $operations['inserted']++;
    }
  }
  
  return $operations;
  
}

/**
 * Function calculates all related uids
 * The result depends highly on the settings for
 * each private relation
 */
function heartbeat_get_related_uids($uid) {

  $uids = $related_uids = array();
  $uids[$uid] = $uid;

  // all the messages where the current uid is in the friendlist
  // if function exists use it
  $related_uids = module_invoke_all('heartbeat_related_uid_info', $uid);

  if (count($related_uids) > 0) {
    foreach ($related_uids as $rel_uid) {
      $uids[$rel_uid] = $rel_uid;
    }
  }

  return $uids; // array_unique($uids);
}


/**
 * Page callbacks.
 */

/**
 * Function to load title for pages.
 */
function heartbeat_messages_title($stream) {
  $types = variable_get('heartbeat_streams', array());
  foreach ($types as $type) {
    if (drupal_strtolower($type['class']) == drupal_strtolower($stream)) {
      return $type['name'];
    }
  }
  return $stream;
}

/**
 * eof().
 */